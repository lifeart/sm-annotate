import { AnnotationToolBase } from "./base";
import { IShape, ShapeMap, Tool, PluginInstances } from "./plugins";
import { ToolPlugin } from "./plugins/base";
import { VideoFrameBuffer } from "./plugins/utils/video-frame-buffer";
export type FrameAnnotationV1 = {
    frame: number;
    fps: number;
    version: 1;
    shapes: IShape[];
};
export declare class AnnotationTool extends AnnotationToolBase<IShape> {
    uiContainer: HTMLDivElement;
    playerControlsContainer: HTMLDivElement;
    referenceVideoFrameBuffer: VideoFrameBuffer | null;
    videoFrameBuffer: VideoFrameBuffer | null;
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    isMouseDown: boolean;
    _currentTool: Tool | null;
    buttons: HTMLButtonElement[];
    colorPicker: HTMLInputElement;
    strokeSizePicker: HTMLInputElement;
    plugins: PluginInstances[];
    playTimeout: number & ReturnType<typeof window.setTimeout>;
    annotatedFrameCoordinates: {
        x: number;
        y: number;
        frame: number;
    }[];
    prevFrame(): void;
    nextFrame(): void;
    addGlobalShape(shape: IShape): void;
    get selectedColor(): string;
    get selectedStrokeSize(): number;
    get currentTool(): Tool | null;
    set currentTool(tool: Tool | null);
    fps: number;
    enableFrameRateDetection(): void;
    timeToFrame(time: number): number;
    get playbackFrame(): number;
    set playbackFrame(frame: number);
    plannedFn: (() => void) | null;
    rvf(fn: () => void): void;
    get canvasWidth(): number;
    get canvasHeight(): number;
    get aspectRatio(): number;
    get isMobile(): boolean;
    get progressBarCoordinates(): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    get shapes(): IShape[];
    set shapes(shapes: IShape[]);
    get undoStack(): IShape[][];
    set undoStack(shapes: IShape[][]);
    get pixelRatio(): number;
    constructor(videoElement: HTMLVideoElement | HTMLImageElement);
    setVideoUrl(url: string, fps?: number): Promise<void>;
    enableVideoFrameBuffer(): void;
    hide(): void;
    showControls(): void;
    hideControls(): void;
    showCanvas(): void;
    hideCanvas(): void;
    updateActiveTimeFrame(mediaTime?: number | undefined): void;
    show(): void;
    setCanvasSettings(): void;
    pluginForTool<T extends Tool>(tool: T): ToolPlugin<ShapeMap[T]>;
    getButtonForTool(tool: Tool): HTMLButtonElement;
    bindContext(): void;
    initProperties(): void;
    setVideoStyles(): void;
    get frameCallbackSupported(): boolean;
    ct: number;
    initFrameCounter(): void;
    init(videoElement: HTMLVideoElement | HTMLImageElement): void;
    onKeyDown(event: KeyboardEvent): void;
    removeLastShape(): void;
    handleUndo(): void;
    destroy(): void;
    isCanvasInitialized: boolean;
    enforcedCanvasSize: {
        width: number;
        height: number;
    } | null;
    _setCanvasSize(): boolean;
    setCanvasSize(): void;
    addShape(shape: IShape): void;
    get msPerFrame(): number;
    syncVideoSizes(): void;
    addReferenceVideoByURL(url: string, fps?: number, type?: string): Promise<void>;
    hideButton(tool: Tool): void;
    showButton(tool: Tool): void;
    addSingletonShape(shape: IShape): void;
    serialize(shapes?: IShape[]): IShape[];
    deserialize(shapes: IShape[]): IShape[];
    getRelativeCoords(event: PointerEvent): {
        x: number;
        y: number;
    };
    handleMouseDown(event: PointerEvent): void;
    get isDrawing(): boolean;
    lastNavigatedFrame: number;
    isProgressBarNavigation: boolean;
    get isVideoPaused(): boolean;
    get hasGlobalOverlays(): boolean;
    handleMouseMove(event: PointerEvent): void;
    getEventX(event: PointerEvent): number;
    getEventY(event: PointerEvent): number;
    handleMouseUp(event: PointerEvent): void;
    focusOnMediaNode(): void;
    drawShapesOverlay(): void;
    clearCanvas(): void;
    frameToDataUrl(): string | null;
    redrawFullCanvas(): void;
    replaceFrame(frame: number, shapes: IShape[]): void;
    addShapesToFrame(frame: number, shapes: IShape[]): void;
    setFrameRate(fps: number): void;
    stringifyShapes(shapes: IShape[]): string;
    parseShapes(shapes: string): any;
    filterNonSerializableShapes(shapes: IShape[]): IShape[];
    saveCurrentFrame(): FrameAnnotationV1;
    loadAllFrames(frames: FrameAnnotationV1[]): void;
    appendFrames(frames: FrameAnnotationV1[]): void;
    saveAllFrames(): FrameAnnotationV1[];
    getAnnotationFrame(event: PointerEvent): number | null;
    get totalFrames(): number;
    frameFromProgressBar(event: PointerEvent, countY?: boolean): number | null;
    hasAnnotationsForFrame(frame: number): boolean | undefined;
    isAnnotationsAsVideoActive: boolean;
    stopAnnotationsAsVideo(): void;
    startAnnotationsAsVideo(): void;
    playAnnotationsAsVideo(): void;
}
