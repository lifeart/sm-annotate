import { AnnotationToolBase } from "./base";
import { IShape, ShapeMap, Tool, PluginInstances } from "./plugins";
import { ToolPlugin } from "./plugins/base";
declare class FrameSyncBucket {
    promise: Promise<any>;
    resolve: (value: any) => void;
    reject: (reason?: any) => void;
    timeout: number;
    constructor();
    release(time?: number | undefined): void;
    init(): void;
}
export type FrameAnnotationV1 = {
    frame: number;
    fps: number;
    version: 1;
    shapes: IShape[];
};
export declare class AnnotationTool extends AnnotationToolBase<IShape> {
    uiContainer: HTMLDivElement;
    playerControlsContainer: HTMLDivElement;
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    isMouseDown: boolean;
    _currentTool: Tool | null;
    buttons: HTMLButtonElement[];
    colorPicker: HTMLInputElement;
    strokeSizePicker: HTMLInputElement;
    plugins: PluginInstances[];
    frameSyncBucket: FrameSyncBucket;
    playTimeout: number & ReturnType<typeof window.setTimeout>;
    annotatedFrameCoordinates: {
        x: number;
        y: number;
        frame: number;
    }[];
    prevFrame(): void;
    nextFrame(): void;
    addGlobalShape(shape: IShape): void;
    get selectedColor(): string;
    get selectedStrokeSize(): number;
    get currentTool(): Tool | null;
    set currentTool(tool: Tool | null);
    fps: number;
    enableFrameRateDetection(): void;
    get playbackFrame(): number;
    set playbackFrame(frame: number);
    get canvasWidth(): number;
    get canvasHeight(): number;
    get aspectRatio(): number;
    get isMobile(): boolean;
    get progressBarCoordinates(): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    get shapes(): IShape[];
    set shapes(shapes: IShape[]);
    get undoStack(): IShape[][];
    set undoStack(shapes: IShape[][]);
    get pixelRatio(): number;
    constructor(videoElement: HTMLVideoElement | HTMLImageElement);
    hide(): void;
    showControls(): void;
    hideControls(): void;
    showCanvas(): void;
    hideCanvas(): void;
    updateActiveTimeFrame(): void;
    show(): Promise<void>;
    setCanvasSettings(): void;
    pluginForTool<T extends Tool>(tool: T): ToolPlugin<ShapeMap[T]>;
    getButtonForTool(tool: Tool): HTMLButtonElement;
    bindContext(): void;
    initProperties(): void;
    setVideoStyles(): void;
    get frameCallbackSupported(): boolean;
    ct: number;
    initFrameCounter(): Promise<unknown> | undefined;
    waitForFrameSync(): Promise<any>;
    init(videoElement: HTMLVideoElement | HTMLImageElement): void;
    onKeyDown(event: KeyboardEvent): void;
    removeLastShape(): Promise<void>;
    handleUndo(): Promise<void>;
    destroy(): void;
    setCanvasSize(): Promise<void>;
    addShape(shape: IShape): void;
    syncTime(force?: boolean, newTime?: null | number): void;
    get msPerFrame(): number;
    syncVideoSizes(): void;
    addReferenceVideoByURL(url: string | URL): Promise<void>;
    isPlaybackRestarting: boolean;
    restartPlayback(): Promise<void>;
    hideButton(tool: Tool): void;
    showButton(tool: Tool): void;
    addSingletonShape(shape: IShape): void;
    serialize(shapes?: IShape[]): IShape[];
    deserialize(shapes: IShape[]): IShape[];
    getRelativeCoords(event: PointerEvent): {
        x: number;
        y: number;
    };
    handleMouseDown(event: PointerEvent): void;
    get isDrawing(): boolean;
    lastNavigatedFrame: number;
    isProgressBarNavigation: boolean;
    get isVideoPaused(): boolean;
    get hasGlobalOverlays(): boolean;
    handleMouseMove(event: PointerEvent): Promise<void>;
    getEventX(event: PointerEvent): number;
    getEventY(event: PointerEvent): number;
    handleMouseUp(event: PointerEvent): Promise<void>;
    focusOnMediaNode(): void;
    drawShapesOverlay(): Promise<void>;
    clearCanvas(): void;
    frameToDataUrl(): Promise<string | null>;
    redrawFullCanvas(): Promise<void>;
    replaceFrame(frame: number, shapes: IShape[]): void;
    addShapesToFrame(frame: number, shapes: IShape[]): void;
    setFrameRate(fps: number): void;
    stringifyShapes(shapes: IShape[]): string;
    parseShapes(shapes: string): any;
    filterNonSerializableShapes(shapes: IShape[]): IShape[];
    saveCurrentFrame(): FrameAnnotationV1;
    loadAllFrames(frames: FrameAnnotationV1[]): void;
    appendFrames(frames: FrameAnnotationV1[]): void;
    saveAllFrames(): FrameAnnotationV1[];
    getAnnotationFrame(event: PointerEvent): number | null;
    get totalFrames(): number;
    frameFromProgressBar(event: PointerEvent, countY?: boolean): number | null;
    hasAnnotationsForFrame(frame: number): boolean | undefined;
    isAnnotationsAsVideoActive: boolean;
    stopAnnotationsAsVideo(): void;
    startAnnotationsAsVideo(): void;
    playAnnotationsAsVideo(): Promise<void>;
}
export {};
